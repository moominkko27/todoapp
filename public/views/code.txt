<!DOCTYPE html>
<html lang="ja">
    <head>
    <!-- Required meta tags -->
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />

    <!-- Bootstrap CSS -->
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
      integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"
      crossorigin="anonymous"
    />
    <link rel="stylesheet" href="../stylesheets/style.css" />

    <title>To Do app</title>
  </head>

  <title>To Do app</title>
  <body>
    <div class="container">
      <button
        type="button"
        class="btn btn-success"
        data-toggle="modal"   data-toggleは何をするかを指定
        data-target="#create-modal"
        id="reflect task" 
      > 
          新規登録
      </button> <!--↑ここが新規登録のボタン外側-->

      <!--<button
        type="button"
        class="btn btn-success"
        data-dismiss="modal" 
        aria-label="#modal-test" 
      > 
          新規登録
      </button>-->

      <div class="modal" tabindex="-1" role="dialog" id="modal-test" aria-labelledby="modal-test"
      aria-hidden="true">
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">新規登録</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              <p>タスクを入力してください</p>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-dismiss="modal">キャンセル</button>
              <button type="button" class="btn btn-primary">登録</button>
            </div>
          </div>
        </div>
      </div> 

      <ul id="task-list"></ul>


      <!--<ul class="list-group">
        <li class="list-group-item category-pink"> <--style.cssでオレンジとグリーン、ピンクでカテゴリを作ってるからそのどれかの色が使える。--
          <div class="row"> <--HPの枠の一部--
            <div class="col-6"> <--犬の散歩のところの枠の大きさ--
              <div>犬の散歩</div>
            </div>
            <div class="col-3">
              <div>2022年4月15日</div>
            </div>
            <div class="col-3">
              <button
              type="button"
              class="btn btn-primary"
              data-toggle="#update-modal"
              > <--toggleは何をするかをbootstrapに伝える。モーダルダイアログを呼び出す--
              更新
              </button>

              <button
              type="button"
              class="btn btn-danger delete"
              data-delete="犬の散歩"
              >
              削除
              </button>
            </div>
          </div>
        </li>
        <li class="list-group-item category-pink">
          <div class="row">
            <div class="col-6">
              <div>犬のごはんを買う</div>
            </div>
            <div class="col-3">
              <div>2022年4月25日</div>
            </div>
            <div class="col-3">
              <button
              type="button"
              class="btn btn-primary"
              data-toggle="modal"
              data-target="#update-modal"
              >
              更新
              </button>
              <button
              type="button"
              class="btn btn-danger delete"
              data-delete="犬のごはんを買う"
              >
              削除
              </button>
            </div>
          </div>
        </li>
        <li class="list-group-item category-pink">
          <div class="row">
            <div class="col-6">
              <div>犬を洗う</div>
            </div>
            <div class="col-3">
              <div>2022年4月30日</div>
            </div>
            <div class="col-3">
              <button
              type="button"
              class="btn btn-primary"
              data-toggle="modal"
              data-target="#update-modal">
              更新
              </button> 
              <button
              type="button"
              class="btn btn-danger delete"
              data-delete="犬を洗う"
              >
              削除
              </button> 
            </div>
          </div>
        </li>  
      </ul>-->
    </div>

    

    <!--モーダル新規登録-->
    <div
      class="modal fade"
      id="create-modal"
      tabindex="-1" TABキーによるフォーカスの移動順序を指定する属性。-1の場合はその要素をクリックしてフォーカスできるようになる
      role="dialog"
      aria-labelledby="create-modal"
      aria-hidden="true"
    > <!--modal fadeはフェードインしてくるモーダルのことで、aria-labelledbyは要素とラベルを関連付ける属性。aria-hiddenは音声読み上げをスキップする機能-->
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="create-modal">新規登録</h5>
            <button
              type="button"
              class="close"
              data-dismiss="modal"
              aria-label="Close"
            >
              <span aria-hidden="true">&times;</span>
            </button>    
          </div>
          <div class="modal-body">
            <form>
              <div class="form-group">
                <label for="task">タスク</label>
                <input type="text" class="form-control" id="task" name="task"/>
              </div>
              <div class="form-group">
                <label for="deadline">期限</label>
                <input type="date" class="form-control" id="deadline" name="deadline"/>
              </div>
              <div class="form-group">
                <label for="category">カテゴリ</label>
                <select class="form-control" id="category" name="category">
                  <option value="1">生活</option>
                  <option value="2">仕事</option>
                  <option value="3">勉強</option>
                  <option value="4">遊び、趣味</option>
                </select>
              </div>
            </form>    
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-dismiss="modal"
            >
              キャンセル
            </button>
            <button
              type="button"
              id="create-task"
              data-dismiss="modal"
              class="btn btn-primary"
            >
              登録
            </button>  
          </div>  
        </div>
      </div>
    </div>  
    <!--モーダル新規登録end-->


    <!--モーダル更新　練習2-->
    <div class="update-form" id="update-form" style="display: none">
      <form>
        <input type="hidden" name="id" />
        <label for="task">タスク名</label>
        <input type="text" id="task" name="task" />
        <label for="deadline">期限</label>
        <input type="date" id="deadline" name="deadline" />
        <label for="category">カテゴリ</label>
        <select id="category" name="category">
          <option value="1">生活</option>
          <option value="2">仕事</option>
          <option value="3">勉強</option>
          <option value="4">遊び、趣味</option>
        </select>
        <label for="status">ステータス</label>
        <select for="status" name="status">
          <option value="1">完了</option>
          <option value="2">作業中</option>
          <option value="3">未実施</option>
        </select>
      </form>
      
      <button class="display-none">キャンセル</button>
      <button class="display-none" id="update-task">保存</button>
    </div>


    <!-- モーダル 更新 -->
    <!--ここはたぶん正解していたとこ
      <div
      class="modal fade"
      id="update-modal"
      tabindex="-1"
      role="dialog"
      aria-labelledby="update-modal"
      aria-hidden="true"
    > 
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="update-modal">更新</h5>
            <button
              type="button"
              class="close"
              data-dismiss="modal"
              aria-label="Close"
            >
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <form>
              <div class="form-group">
                <label for="update-task">タスク</label>
                <input
                  type="text"
                  class="form-control"
                  id="update-task"
                  name="update-task"
                />
              </div>
              <div class="form-group">
                <label for="update-deadline">期限</label>
                <input
                  type="date"
                  class="form-control"
                  id="update-deadline"
                  name="update-deadline"
                />
              </div>
              <div class="form-group">
                <label for="category">カテゴリ</label>
                <select class="form-control" name="update-category">
                  <option value="1">生活</option>
                  <option value="2">仕事</option>
                  <option value="3">勉強</option>
                  <option value="4">遊び、趣味</option>
                </select>
              </div>
              <div class="form-group">
                <label for="category">ステータス</label>
                <select class="form-control" name="update-category">
                  <option value="1">完了</option>
                  <option value="2">作業中</option>
                  <option value="3">未実施</option>
                </select>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-dismiss="modal"
            >
              キャンセル
            </button>
            <button
              type="button"
              data-dismiss="modal"
              class="btn btn-primary"
              id="update-task"
            >
              保存
            </button>
          </div>
        </div>
      </div>
    </div>

    <-- モーダル 更新 END -->
  

  <!--上の塩見さんのサンプルを見ながら書いたやつ↓-->
  <!--モーダルウィンドウはボタンやリンクなどをクリックしたときに表示するポップアップ-->
  <!--<div 
    class="modal fade" 
    id="create-modal"
    tabindex="-1" 
    role="dialog"
    aria-labelledby="create-modal"  
    aria-hidden="true" 
  >
  <--class=modal fadeのmodalは元のウィンドウの上に別枠で表示されるウィンドウのこと-->
  <!--tabindex=-1はそのオブジェクトにフォーカスしなくなるという意味-->
  <!--aria-labelledby="create-modalは画像や文字に情報を付けたいときとかに使う"-->
  <!--aria-hidden="true"は機能に関係なく単なる装飾であるアイコンの場合、スクリーンリーダー（コンピューターの画面読み上げソフト）に対して存在しないものと認識させることができる-->

  <!--<div class="modal dialog" role="document"> <--modal dialogはPCの操作画面に表示されるダイアログボックス（入力を促すもの）のうち、画面上のほかの領域や要素の操作をできないようにするもの。利用者の操作によりボックスが閉じるまでほかの操作を受け付けない)-->
    <!--<div class="modal content">
      <div class="modal header">
        <h5 class="modal title" id="create-modal">ToDoリスト</h5> 
        <button
          type="button"
          class="close"
          data-dismiss="modal" 
          aria-label="Close" 
        > <--data-dismiss=modalはモーダルを閉じるボタン--><!--aria-labelは画像や文字に情報を付けたいときとかに使う-->
          <!--<span aria-hidden="true">&times;</span> <!aria-hiddenは音声読み上げをその部分だけスキップする-->
          <!--新規登録-->
        <!--</button>    
      </div>
      <div class="modal-body">
        <form>
          <div class="form-group"> <--余白などの見た目を整える--
            <label for="task">タスク</label> <--label要素にfor属性を使ってコントロール部品と関連付ける。--
            <input type="text" class="form-control" id="task" name="task" />
          </div>
            <div class="form-group">
            <label for="deadline">期限</label>
            <input type="date" class="form-control" id="deadline" name="deadline"/>
          </div>
          <div class="form-group">
            <label for="category">カテゴリ</label>
            <select class="form-control" id="category" name="category">
              <option value="1">生活</option>
              <option value="2">仕事</option>
              <option value="3">勉強</option>
              <option value="4">趣味遊び</option>
            </select>
          </div>    
        </form>
      </div>
      <div class="modal-footer">
        <button
          type="button"
          class="btn btn-secondary"
          data-dismiss="modal"
        >
         キャンセル
        </button>
        <button
          type="button"
          id="create-task"
          data-dismiss="modal"
          class="btn btn-primary"
        >
          登録
        </button>
      </div>
    </div>
  </div>             
  <--モーダル新規登録終わり--> 

（387～）
    const list = response.map((item) => {
    const date = new Date(item.deadline);
    const year = date.getFullYear();
    const month = ("0" + (date.getMonth() + 1)).slice(-2);
    const day = ("0" + date.getDate()).slice(-2);
    const deadlineVal = year + "年" + month + "月" + day + "日";
    //const deadlineVal = `${year}-${month}-${day}`;  
    console.log(deadlineVal);

(↑の解説)
constは変数。const listでリストを作る。それをitemという名前で引っ張ってきている。=itemのdeadlineという意味になる。
const (date)で関数を定義していて、データベースからdateを引っ張ってきている。そしてdateという中からgetFullYearを引っ張っている。
const monthの初めの"0"は1桁の月の初めに0を付けるため例えば2月を02月にするということ。date.getMonthの()+1は、VSCodeは10進法で数字を数えているから0から数えていることに
なって、1から数えるようにしたいから+1を付ける。
slice(-2)は後ろの2桁を持ってくるという意味。例えば10進法になってるから12月もそのままだと012月になる。それをslice(-2)を
付けることによって、後ろから2桁をとるという意味になって12月となる。

412行目は新しい関数を定義している。` `はyear/month/dayという変数を文字列として出すことになる。

408のitem.deadlineのdeadlineは412のdeadlineValにつながっていて、
408のところで一回itemをとってきていて414のconsole.log(deadlineVal)に
つながる。


（397～）
//リストを表示
return `
    <li class="list-group-item category-pink">
        <div class="row">
            <div class="col-6">
                <span>${item.task_name}</span>
            </div>
            <div class="col-3">
                <span>${deadlineVal}</span>
            </div>
            <div class="col-3">  
                <span>
                    <button 
                      class="btn btn-primary"
                      id="update-button" 
                      data-id=${item.id}
                      data-toggle="modal"
                      data-target="#update-modal"
                    >
                      更新
                    </button>
（↑の解説）
returnは値をみえるように表示しているもの。

443ラインのitem.idはデータベース上のidを持ってくるということ。





    <!--以下自分で調べて私の書いたコード↓-->
  <!--<body>
    <div class="container">
      <h1>To Do app</h1>
      <tr>
      <a class="btn btn-primary" href="#" role="button">+タスクを追加</a>
      <div class="modal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">タスクを記入</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              <p>タスクを入力</p>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-dismiss="modal">閉じる</button>
              <button type="button" class="btn btn-primary">保存</button>
            </div>
          </div>
        </div>
      </div>
        <ul class="list-group"> 
        <table> 
          <tr>
            <td><li>犬のごはんを購入する</li></td>
            <td>2022年5月4日</td>
            <td><button type="button" class="btn btn-success">完了</button></td>
            <td><button type="button" class="btn btn-warning">未完了</button></td>
            <td><button type="button" class="btn btn-link">削除</button></td>
          </li>
          </tr>
          <tr>
            <td><li>犬の散歩をする</li></td>
            <td>2022年5月6日</td>
            <td><button type="button" class="btn btn-success">完了</button></td>
            <td><button type="button" class="btn btn-warning">未完了</button></td>
            <td><button type="button" class="btn btn-link">削除</button></td>
          </tr> 
          <tr>
            <td><li>犬を洗う</li></td>
            <td>2022年5月6日</td>
            <td><button type="button" class="btn btn-success">完了</button></td>
            <td><button type="button" class="btn btn-warning">未完了</button></td>
            <td><button type="button" class="btn btn-link">削除</button></td>
          </tr> 
          <tr>
            <td><li>犬の毛カット</li></td>
            <td>2022年5月20日</td>
            <td><button type="button" class="btn btn-success">完了</button></td>
            <td><button type="button" class="btn btn-warning">未完了</button></td>
            <td><button type="button" class="btn btn-link">削除</button></td>
          </tr> 
        </table>
      </ul>
      <!
      <table>
        <tr>
          <td>task1</td>
          <td>button</td>
          <td><button>完了</button></td>
          <td><button>未完了</button></td>
        </tr>
        <tr>
          <td>task2</td>
          <td>button</td>
        </tr>
    </table>-->
      <!-- Content here -->
    <!--</div>

    <-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script
      src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
      integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
      crossorigin="anonymous"
    ></script>
    <script src="../javascripts/index.js"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
      integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
      integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
      crossorigin="anonymous"
    ></script>

    <script>
      //登録ボタン押下時
      $("#create-task").on("click", async function () { //apiたたくからかならずasyncfunctionを入れること
        //リクエストデータをフォームから取得
        const requestData = { //const requestdataでrequestを呼び出す
          taskName: $("#create-form input[name=task]").val(), //[name=task]の値を手掛かりに.valでコードを取得できる。#create-formのidのなかのさらにinput formを表す。
          deadline: $("#create-form input[name=deadline]").val(), //#create-formはhtmlでid=creste-formを書いていたからそれを書く
          category: $("#create-form select[name=category]").val(),
        };

        //新規登録APIを実行
        const response = await httpPost(
          "//" + window.location.host + "/api/tasks",
          requestData
        );

        //画面をリロード
        window.location.reload()});

        //更新ボタン押下時
        $(document).on("click", "#update-button", async function () {
          $("update-form").show();
          const id = $(this).data("id");
          const response = await httpGet(
            "//" + window.location.host + `/api/tasks/${id}`
          );

          //初期値をセット
          $("#update-form input[name=id]").val(response[0].id);
          $("#update-form input[name=task]").val(response[0].task_name);
          $("#update-form input[name=deadline]").val(deadlineVal);
          $("#update-form input[name=category]").val(response[0].category_id);
          $("#update-form input[name=status]").val(response[0].task_status);
        });  

    //タスク一覧取得
    $(async function () {
      //一覧取得APIを実行
      const response = await httpGet(
        "//" + window.location.host + "/api/tasks"
      );

      const list = response.map((item) => {
        //リストを表示
        return `
          <li>
              <span>${item.task_name}</span>
              <span>${item.deadline}</span>
              <span><button id="update-button" data-id=${item.id} >更新</button></span>
              <span><button id="delete-button" data-id=${item.id} data-delete=${item.task_name}>削除</button></span>
          </li>`;    
      });

        //ulタグにリストを追加
      $("ul#task-list").append(list);
        //console.log(response);
    }); //asyncは非同期関数を定義。非同期処理は、ある関数が呼び出されたとき戻り値として本来渡したい結果を返すのではなく、一度関数としては終了し後で返せる状態になったときに呼び出し元にその値を通知する
      //httpGetはデータを取り込む。


      //削除
    $(".delete").on("click", function () {
        const taskName = $(this).data("delete");
        alert(`下記の内容を削除する \n ${taskName}`);
    });

      //新規登録
      $("#create-task").on("click", async function () {
        const data = {
          taskName: $("[name=task]").val(),
          deadline: $("[name=deadline]").val(),
          category: $("[name=category]").val(),
        };  
        const response = await httpPost(
          "//" + window.location.host + "/api/tasks",
          data
        );
        console.log(response);
      });
    </script>
  </body>
</html>